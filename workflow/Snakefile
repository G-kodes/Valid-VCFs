from snakemake.utils import min_version, validate
import os

min_version("6.0")


# DEFINE CONFIG FILE FOR SNAKEMAKE:
configfile: os.path.join("config", "config.json")


validate(config, os.path.join("..", "config", "config.schema.json"))


include: "rules/common.py"


ruleorder: CP > TABIX_INDEXING > BGZIP


wildcard_constraints:
    ext="(\.vcf|\.vcf\.gz|\.vcf\.gz\.tbi)$",
    filename="([^_\n]+(?!_VALIDATED))",


reX = r"^([A-Z]{0,1}:{1}[\\|\/]{1,2}){0,1}(.+[\\\/])*(.+)(\.vcf|\.vcf\.gz|\.vcf\.gz\.tbi)$"


rule all:
    """
    Request validation for all .vcf files given in the `resources/data` folder
    """

    input:
        expand(
            "results/{filename}.{ext}",
            filename=[
                re.search(reX, item).group(3) + "_VALIDATED" for item in config["Files"]
            ],
            ext=["vcf.gz", "vcf.gz.tbi"],
        ),


rule CP:
    """
    Copy any files that do not require compression or generation
    """

    log:
        "results/{filename}{ext}.log",
    input:
        GetInputFile,
    output:
        "results/{filename}{ext}",
    params:
        executable=config["Executables"]["cp"],
    conda:
        "envs/VALID-FASTAS.yaml"
    shell:
        """
        echo 'Copying {input} -> {output}'
        {params.executable} "{input}" "{output}"
        """


rule BGZIP:
    """
    Use BG-Zip compression to generate GATK-comaptible `.gz` file for either FASTA or VCF format uncompressed inputs
    """

    log:
        "results/{filename}.log",
    input:
        "results/{filename}.vcf",
    output:
        "results/{filename}.vcf.gz",
    params:
        executable=config["Executables"]["BGZip"],
    conda:
        "envs/VALID-FASTAS.yaml"
    shell:
        """
        echo 'BGZipping {input} -> {output}'
        {params.executable} -c "{input}" > "{output}"
        """


rule TABIX_INDEXING:
    """
    Generate a Tabix index for the given VCF file
    """

    log:
        "results/{filename}.log",
    input:
        "results/{filename}.vcf.gz",
    output:
        "results/{filename}.vcf.gz.tbi",
    conda:
        "envs/GATK4.yaml"
    params:
        executable=config["Executables"]["Tabix"],
    shell:
        """
        echo 'Generating an index file: {input} -> {output}'
        {params.executable} -f -p vcf {input}
        """


rule FORMAT_VALIDATION:
    """
    Perform spec validation of VCF format.
    """

    log:
        "logs/{filename}_VALIDATED.log",
    input:
        "results/{filename}.vcf.gz.tbi",
        vcf="results/{filename}.vcf.gz",
        ref=getRef,
        snpRef=getSnpRef,
    output:
        "results/{filename}_VALIDATED.vcf.gz",
        "results/{filename}_VALIDATED.vcf.gz.tbi",
    params:
        memory="128G",
        executable=config["Executables"]["GATK"],
    resources:
        cpus=10,
        nodes=1,
        queue="long",
        walltime="900:00:00",
    conda:
        "envs/GATK4.yaml"
    shell:
        """
        echo 'Performing VCF format validation: {input} -> {output}'
        {params.executable} ValidateVariants -V {input.vcf} -R {input.ref} -D {input.snpRef}
        """
